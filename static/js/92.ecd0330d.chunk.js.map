{"version":3,"file":"static/js/92.ecd0330d.chunk.js","mappings":"oKAEA,MA+BA,EA/BsBA,IAAwD,IAAvD,YAACC,EAAW,eAAEC,EAAc,KAAEC,EAAI,aAAEC,GAAaJ,EAQpE,MAAMK,EAAaC,KAAKC,KAAKJ,EAAKK,OAASJ,GAC3C,OACIK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mDAAkDC,SAAA,EAC7DF,EAAAA,EAAAA,MAAA,UACIC,UAAS,2DAAAE,OAA6E,IAAhBX,EAAoB,cAAgB,gCAA+B,4BACzIY,QAASA,IAAMX,GAAeY,GAAQR,KAAKS,IAAID,EAAO,EAAG,KACzDE,SAA0B,IAAhBf,EAAkBU,SAAA,EAE7BM,EAAAA,EAAAA,KAACC,EAAAA,IAAa,CAAER,UAAU,YAAW,gBAExCO,EAAAA,EAAAA,KAAA,QAAAN,SAAA,QAAAC,OAAeX,EAAW,QAAAW,OAAOP,MACjCI,EAAAA,EAAAA,MAAA,UACIC,UAAS,2DAAAE,OAA6DX,IAAgBI,EAAa,cAAgB,gCAA+B,4BAClJQ,QAASA,IAAMX,GAAeY,GAAQR,KAAKa,IAAIL,EAAO,EAAGT,KACzDW,SAAUf,IAAgBI,EAAWM,SAAA,CACxC,SACQM,EAAAA,EAAAA,KAACG,EAAAA,IAAc,CAACV,UAAU,iBAEjC,C,2GCtBd,MAAMW,EAAarB,IAAiB,IAAhB,OAAEsB,GAAQtB,EAC1B,MAAMuB,GAAWC,EAAAA,EAAAA,OACVC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,0BAClCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GAQvC,OACIlB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0DAAyDC,SAAA,EACpEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,CACpBiB,IACGX,EAAAA,EAAAA,KAAA,OAAKP,UAAU,0FAAyFC,UACpGM,EAAAA,EAAAA,KAAA,OAAKP,UAAU,0CAGvBO,EAAAA,EAAAA,KAAA,OACIa,IAAKL,EACLM,YAAY,YACZC,IAAKV,EAAOW,UAAUC,MACtBxB,UAAS,2DAAAE,OAA6DgB,EAAU,YAAc,eAC9FO,OAAQA,KACJN,GAAW,GACXH,EAAYJ,EAAOc,SAAS,QAIxC3B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBM,EAAAA,EAAAA,KAAA,OAAKP,UAAU,8BAA6BC,SAAEW,EAAOW,UAAUC,SAC/DzB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,wBAAuBC,SAAA,CAAC,eA5B7B0B,KAChB,MAAMC,EAAO,IAAIC,KAAKF,GAChBG,EAAOF,EAAKG,cACZC,EAAQC,OAAOL,EAAKM,WAAa,GAAGC,SAAS,EAAG,KAChDC,EAAMH,OAAOL,EAAKS,WAAWF,SAAS,EAAG,KAC/C,MAAM,GAANjC,OAAUkC,EAAG,KAAAlC,OAAI8B,EAAK,KAAA9B,OAAI4B,EAAI,EAuB4BQ,CAAW1B,EAAOW,UAAUgB,eAC9EhC,EAAAA,EAAAA,KAAA,KAAGP,UAAU,wBAAuBC,SAAEW,EAAOW,UAAUa,UAE3DrC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BM,EAAAA,EAAAA,KAAA,OAAKP,UAAU,yCAAwCC,UACnDM,EAAAA,EAAAA,KAAA,OAAKP,UAAU,wBAAuBC,SAAC,4BAE3CM,EAAAA,EAAAA,KAAA,OAAKP,UAAU,4DAA2DC,UACtEM,EAAAA,EAAAA,KAAA,OAAKiC,MAAO,CAAEC,MAAM,cAAiBzC,UAAU,wGAGvDO,EAAAA,EAAAA,KAAA,UAAQP,UAAU,iFAAiFG,QAASA,IAAMU,EAAS,gBAAiB,CAAE6B,MAAO,CAAEC,GAAI/B,EAAOgC,OAAS3C,SAAC,2BAE9K,EAoHd,EA/GkB4C,KACd,MAAOC,EAASC,IAAa9B,EAAAA,EAAAA,UAAS,KAC/BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChC1B,EAAaC,IAAkByB,EAAAA,EAAAA,UAAS,IAExC+B,EAAYC,IAAiBhC,EAAAA,EAAAA,UAAS,IACvCiC,EAAQC,EAAAA,EAAQC,IAAI,mBAC1B,IAAIC,EAAS,KAEb,GAAIH,EACA,IACIG,EAASH,CACb,CAAE,MAAOI,GACLC,QAAQD,MAAM,wBAAyBA,EAC3C,EAEJE,EAAAA,EAAAA,YAAU,KACYC,WACd,IACI,MAAMC,QAAiBC,MAAM,GAADzD,OAAI0D,2BAAyB,uCAAuC,CAC5FC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEC,QAASb,MAEpC,GAAwB,MAApBK,EAASS,OAGT,OAFApB,EAAU,SACV5B,GAAW,GAKf,IAAKuC,EAASU,GACV,MAAM,IAAIC,MAAM,+BAEpB,MAEMC,SAFaZ,EAASa,QAECC,gBAAgBC,QAAOC,GAAmC,OAAvBA,EAASnD,YACzE,GAA+B,IAA3B+C,EAAgBxE,OAChBiD,EAAU,QACP,CACH,MAAM4B,EAAuBL,EAAgBM,KAAIF,IAAQ,IAClDA,EACHhD,SAAS,GAADxB,OAAK0D,2BAAyB,gCAAA1D,OAA+BwE,EAASnD,UAAUsD,eAE5F9B,EAAU4B,EACd,CACAxD,GAAW,EACf,CAAE,MAAOmC,GAELnC,GAAW,EACf,GAIJ2D,EAAW,GACZ,CAACzB,IAGJ,MAAM0B,EAAejC,EAAQ2B,QAAQ7D,IAAY,IAADoE,EAE5C,OADmC,QAAnBA,EAAGpE,EAAOW,iBAAS,IAAAyD,OAAA,EAAhBA,EAAkBxD,MAAMyD,cAAcC,SAASlC,EAAWiC,cAC5D,IAIrB,GAAI/D,EACA,OAAOX,EAAAA,EAAAA,KAAA,OAAKP,UAAU,4CAA2CC,UAC7DM,EAAAA,EAAAA,KAAA,OAAKP,UAAU,mCAAkCC,SAAC,gBAK1D,MAAMkF,EAAgBJ,EAAaK,MAtEf,GAuEf7F,EAAc,GAvEC,EAwEhBA,GAEJ,OACIgB,EAAAA,EAAAA,KAAA,OAAKP,UAAU,yDAAwDC,SAC/C,IAAnB6C,EAAQhD,QACLS,EAAAA,EAAAA,KAAA,OAAKP,UAAU,+FAA8FC,SAAC,yBAE9GF,EAAAA,EAAAA,MAACsF,EAAAA,SAAQ,CAAApF,SAAA,EACLF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sGAAqGC,SAAA,EAChHM,EAAAA,EAAAA,KAAA,SACI+E,KAAK,OACLC,YAAY,6BACZC,SAAWC,GAAMxC,EAAcwC,EAAEC,OAAOC,OACxC3F,UAAU,8EAEdO,EAAAA,EAAAA,KAAA,UAAQP,UAAU,gBAAeC,UAC7BM,EAAAA,EAAAA,KAACqF,EAAAA,IAAQ,UAGjBrF,EAAAA,EAAAA,KAAA,OAAKP,UAAU,uCAAsCC,SAChDkF,EAAcP,KAAI,CAAChE,EAAQiF,KACxBtF,EAAAA,EAAAA,KAACI,EAAU,CAAaC,OAAQA,GAAfiF,QAGzBtF,EAAAA,EAAAA,KAACuF,EAAAA,EAAa,CACVtG,eAAgBA,EAChBD,YAAaA,EACbE,KAAMsF,EACNrF,aApGA,QAwGV,C","sources":["components/pagination/PaginationNew.jsx","studentDashboard/component/MyCourses.jsx"],"sourcesContent":["import React from 'react'\r\nimport { FiChevronLeft, FiChevronRight } from \"react-icons/fi\"\r\nconst PaginationNew = ({currentPage, setCurrentPage, data, itemsPerPage}) => {\r\n\r\n    // Calculate the indices for slicing the data array\r\n    // const indexOfLastItem = currentPage * itemsPerPage;\r\n    // const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n    // const currentItems = data.slice(indexOfFirstItem, indexOfLastItem);\r\n  \r\n    // Calculate total number of pages\r\n    const totalPages = Math.ceil(data.length / itemsPerPage);\r\n    return (\r\n        <div className=\"flex items-center justify-center space-x-4 mt-10\">\r\n            <button\r\n                className={`px-6 flex items-center justify-center py-2 rounded-full ${currentPage === 1 ? 'bg-gray-300' : 'bg-blue-100 hover:bg-blue-200'} text-blue-700 font-bold`}\r\n                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\r\n                disabled={currentPage === 1}\r\n            >\r\n               <FiChevronLeft  className='h-5 w-5'/> Previous\r\n            </button>\r\n            <span>{`Page ${currentPage} of ${totalPages}`}</span>\r\n            <button\r\n                className={`px-8 flex items-center justify-center py-2 rounded-full ${currentPage === totalPages ? 'bg-gray-300' : 'bg-blue-100 hover:bg-blue-200'} text-blue-700 font-bold`}\r\n                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\r\n                disabled={currentPage === totalPages}\r\n            >\r\n                Next <FiChevronRight className='h-5 w-5'/>\r\n            </button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PaginationNew","import React, { Fragment, useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport PaginationNew from '../../components/pagination/PaginationNew';\r\nimport { FaSearch } from 'react-icons/fa';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst CourseCard = ({ course }) => {\r\n    const navigate = useNavigate()\r\n    const [imageSrc, setImageSrc] = useState(`/assets/upcoming.webp`);\r\n    const [loading, setLoading] = useState(true);\r\n    const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        return `${day}-${month}-${year}`;\r\n    };\r\n    return (\r\n        <div className=\"max-w-xs rounded overflow-hidden shadow-lg p-4 bg-white\">\r\n            <div className=\"relative\">\r\n                {loading && (\r\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-gray-200 animate-pulse rounded-2xl\">\r\n                        <div className=\"w-24 h-24 bg-gray-400 rounded-full\"></div>\r\n                    </div>\r\n                )}\r\n                <img\r\n                    src={imageSrc}\r\n                    crossOrigin=\"anonymous\"\r\n                    alt={course.course_id.title}\r\n                    className={`w-full h-52 rounded-2xl transition-opacity duration-500 ${loading ? \"opacity-0\" : \"opacity-100\"}`}\r\n                    onLoad={() => {\r\n                        setLoading(false);\r\n                        setImageSrc(course.imageUrl);\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className=\"px-4 py-2\">\r\n                <div className=\"font-bold text-lg h-20 mb-1\">{course.course_id.title}</div>\r\n                <p className=\"text-gray-600 text-xs\">Created at: {formatDate(course.course_id.createdAt)}</p>\r\n                <p className=\"text-gray-600 text-xs\">{course.course_id.day}</p>\r\n            </div>\r\n            <div className=\"px-4 pt-2 pb-2\">\r\n                <div className=\"relative pt-1\">\r\n                    <div className=\"flex mb-2 items-center justify-between\">\r\n                        <div className=\"text-xs text-gray-500\">progress % Completed</div>\r\n                    </div>\r\n                    <div className=\"overflow-hidden h-2 mb-2 text-xs flex rounded bg-gray-200\">\r\n                        <div style={{ width: `progress %` }} className=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500\"></div>\r\n                    </div>\r\n                </div>\r\n                <button className=\"bg-blue-600 hover:bg-blue-700 mt-2 text-white font-bold py-1 px-3 rounded-full\" onClick={() => navigate(\"/watch-course\", { state: { id: course._id } })}>Continue Learning</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst MyCourses = () => {\r\n    const [courses, setCourse] = useState([])\r\n    const [loading, setLoading] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const itemperpage = 6\r\n    const [searchText, setSearchText] = useState('');\r\n    const token = Cookies.get(\"access_tokennew\");\r\n    let userId = null;\r\n\r\n    if (token) {\r\n        try {\r\n            userId = token;\r\n        } catch (error) {\r\n            console.error('Error decoding token:', error);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        const getcourse = async () => {\r\n            try {\r\n                const response = await fetch(`${process.env.REACT_APP_API}zenstudy/api/payment/purchaseCourse`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({ user_id: userId })\r\n                });\r\n                if (response.status === 204) {\r\n                    setCourse([]);\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n                //console.log(\"Purchase_course\", data)\r\n                const filteredCourses = data.purchaseCourses.filter(purchase => purchase.course_id !== null);\r\n                if (filteredCourses.length === 0) {\r\n                    setCourse([]);\r\n                } else {\r\n                    const coursesWithImageUrls = filteredCourses.map(purchase => ({\r\n                        ...purchase,\r\n                        imageUrl: `${process.env.REACT_APP_API}zenstudy/api/image/getimage/${purchase.course_id.thumbnail}` // Assuming `thumbnail` is a property of `course_id`\r\n                    }));\r\n                    setCourse(coursesWithImageUrls);\r\n                }\r\n                setLoading(false);\r\n            } catch (error) {\r\n                //console.log(\"Error:\", error);\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n\r\n        getcourse()\r\n    }, [userId])\r\n\r\n\r\n    const filteredData = courses.filter((course) => {\r\n        const titleMatch = course.course_id?.title.toLowerCase().includes(searchText.toLowerCase());\r\n        return titleMatch;\r\n    });\r\n\r\n\r\n    if (loading) {\r\n        return <div className=\"flex items-center justify-center h-screen\">\r\n            <div className=\"text-4xl font-bold animate-pulse\">ZenStudy.</div>\r\n        </div>\r\n    }\r\n\r\n\r\n    const paginatedData = filteredData.slice(\r\n        (currentPage - 1) * itemperpage,\r\n        currentPage * itemperpage\r\n    )\r\n    return (\r\n        <div className='container mx-auto p-4 flex flex-col items-center gap-4'>\r\n            {courses.length === 0 ? (\r\n                <div className=\"flex text-center justify-center items-center text-2xl md:text-3xl lg:text-4xl  text-gray-500\">No courses found...</div>\r\n            ) : (\r\n                <Fragment>\r\n                    <div className=\"flex items-center  justify-center bg-blue-100 rounded-full px-4 py-2 mb-4 w-full md:w-1/2 lg:w-1/2 \">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search Our course by title\"\r\n                            onChange={(e) => setSearchText(e.target.value)}\r\n                            className=\"bg-blue-100 rounded-l-full focus:outline-none  py-2 w-full text-gray-700\"\r\n                        />\r\n                        <button className=\"text-blue-500\">\r\n                            <FaSearch />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"flex flex-wrap justify-center gap-10\">\r\n                        {paginatedData.map((course, index) => (\r\n                            <CourseCard key={index} course={course} />\r\n                        ))}\r\n                    </div>\r\n                    <PaginationNew\r\n                        setCurrentPage={setCurrentPage}\r\n                        currentPage={currentPage}\r\n                        data={filteredData}\r\n                        itemsPerPage={itemperpage}\r\n                    />\r\n                </Fragment>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default MyCourses"],"names":["_ref","currentPage","setCurrentPage","data","itemsPerPage","totalPages","Math","ceil","length","_jsxs","className","children","concat","onClick","prev","max","disabled","_jsx","FiChevronLeft","min","FiChevronRight","CourseCard","course","navigate","useNavigate","imageSrc","setImageSrc","useState","loading","setLoading","src","crossOrigin","alt","course_id","title","onLoad","imageUrl","dateString","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","formatDate","createdAt","style","width","state","id","_id","MyCourses","courses","setCourse","searchText","setSearchText","token","Cookies","get","userId","error","console","useEffect","async","response","fetch","process","method","headers","body","JSON","stringify","user_id","status","ok","Error","filteredCourses","json","purchaseCourses","filter","purchase","coursesWithImageUrls","map","thumbnail","getcourse","filteredData","_course$course_id","toLowerCase","includes","paginatedData","slice","Fragment","type","placeholder","onChange","e","target","value","FaSearch","index","PaginationNew"],"sourceRoot":""}