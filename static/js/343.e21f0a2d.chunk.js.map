{"version":3,"file":"static/js/343.e21f0a2d.chunk.js","mappings":"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","sources":["Firebase.jsx","components/auth/Sign-up.jsx"],"sourcesContent":["// Initialize Firebase\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport {getStorage} from \"@firebase/storage\"\r\nconst config = {\r\n  apiKey: \"AIzaSyDIAQat6BiMvf-tFNomBJt19k9318U4QUg\",\r\n  authDomain: \"zenstudy-d4c4c.firebaseapp.com\",\r\n  projectId: \"zenstudy-d4c4c\",\r\n  storageBucket: \"zenstudy-d4c4c.appspot.com\",\r\n  messagingSenderId: \"406542645075\",\r\n  appId: \"1:406542645075:web:216c82f54462d35a3713a6\",\r\n  measurementId: \"G-C4MW5RMTWW\"\r\n\r\n}\r\nfirebase.initializeApp(config);\r\nconst analytics = getStorage(firebase.initializeApp(config))\r\nexport { firebase, analytics }\r\n\r\n\r\n    ","import React, { useState } from 'react';\r\nimport { FiEye, FiEyeOff, FiFacebook, FiInstagram, FiTwitter, FiYoutube } from \"react-icons/fi\";\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Box, TextField, InputAdornment } from '@mui/material';\r\nimport { MdPerson, MdPhone } from 'react-icons/md';\r\nimport { firebase } from '../../Firebase'; // Adjust the import path as necessary\r\nimport { useSpring, animated } from \"@react-spring/web\";\r\nimport { getAuth, signInWithCredential, PhoneAuthProvider } from \"firebase/auth\";\r\nimport Swal from 'sweetalert2';\r\nimport { useInView } from 'react-intersection-observer';\r\n\r\n\r\nconst SignUp = () => {\r\n    const [formData, setFormData] = useState({\r\n        name: \"\",\r\n        phone: \"\",\r\n        password: \"\",\r\n        cpassword: \"\"\r\n    });\r\n    const [otpSent, setOtpSent] = useState(false);\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showCPassword, setShowCPassword] = useState(false);\r\n    const [showotpForm, setShowOtpForm] = useState(false);\r\n    const [timer, setTimer] = useState(40);\r\n    const [loading, setLoading] = useState(false);\r\n    const [otploading, setotpLoading] = useState(false);\r\n    const [verificationId, setVerificationId] = useState(null);\r\n    const [otpError, setOtpError] = useState(\"\");\r\n    const { register, handleSubmit, formState: { errors }, watch } = useForm();\r\n    const { register: register2, handleSubmit: handleSubmit2, formState: { errors: errors2 } } = useForm();\r\n    const navigate = useNavigate();\r\n    const password = watch(\"password\");\r\n\r\n\r\n    // Intersection Observers\r\n    const { ref: slideLeftRef, inView: slideLeftInView } = useInView({ triggerOnce: true });\r\n    const { ref: slideUpRef, inView: slideUpInView } = useInView({ triggerOnce: true });\r\n    const { ref: slideRightRef, inView: slideRightInView } = useInView({ triggerOnce: true });\r\n\r\n\r\n    const SlideUp = useSpring({\r\n        from: { y: 100, opacity: 0 },\r\n        to: { y: slideUpInView ? 0 : 100, opacity: slideUpInView ? 1 : 0 },\r\n        config: { duration: 500 },\r\n    });\r\n\r\n\r\n    const SlideLeft = useSpring({\r\n        from: { x: -100, opacity: 0 },\r\n        to: { x: slideLeftInView ? 0 : -100, opacity: slideLeftInView ? 1 : 0 },\r\n        config: { duration: 500 },\r\n    });\r\n\r\n\r\n    const SlideRight = useSpring({\r\n        from: { x: 100, opacity: 0 },\r\n        to: { x: slideRightInView ? 0 : 100, opacity: slideRightInView ? 1 : 0 },\r\n        config: { duration: 500 },\r\n    });\r\n\r\n\r\n    // Handle OTP Sent to firebase\r\n    const handlePhoneNumberAuth = async (phoneNumber) => {\r\n        try {\r\n            if (!window.recaptchaVerifier) {\r\n                window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container', {\r\n                    size: 'invisible',\r\n                    callback: () => {\r\n                        //console.log('Recaptcha verified');\r\n                    },\r\n                });\r\n            }\r\n\r\n\r\n            const appVerifier = window.recaptchaVerifier;\r\n            const confirmationResult = await firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier);\r\n            setVerificationId(confirmationResult.verificationId);\r\n            setShowOtpForm(true);\r\n            startTimer();\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: 'OTP Sent',\r\n                text: `OTP has been sent to ${phoneNumber}`,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error sending OTP:', error);\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Error',\r\n                text: 'Failed to send OTP. Please try again.',\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    // Called Otp Send function and User Verification code\r\n    const OnSubmit = async (data) => {\r\n        setLoading(true);\r\n        setFormData(data);\r\n        try {\r\n            const sendData = {\r\n                phone: data.phone,\r\n            };\r\n            const response = await fetch(\r\n                `${process.env.REACT_APP_API}zenstudy/api/auth/user-check`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(sendData)\r\n                }\r\n            );\r\n\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || \"Register failed\");\r\n            }\r\n            const resData = await response.json();\r\n            if (resData.message === \"Success\") {\r\n                Swal.fire({\r\n                    icon: \"error\",\r\n                    title: \"User Already Registered\",\r\n                    text: \"This phone number is already associated with an account. Please log in to continue.\",\r\n                });\r\n            }\r\n        } catch (error) {\r\n            await handlePhoneNumberAuth(`+91${data.phone}`);\r\n        }\r\n    };\r\n\r\n\r\n    // Resend OTP Timer 40 sec\r\n    const startTimer = () => {\r\n        setOtpSent(true);\r\n        const interval = setInterval(() => {\r\n            setTimer((prevTimer) => {\r\n                if (prevTimer === 0) {\r\n                    clearInterval(interval);\r\n                    setOtpSent(false);\r\n                    setTimer(40);\r\n                    return prevTimer;\r\n                }\r\n                return prevTimer - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n\r\n    // OTP Verification and user registration API call\r\n    const OnSubmitOTP = async (data) => {\r\n        try {\r\n            setotpLoading(true);\r\n            const auth = getAuth();\r\n            const credential = PhoneAuthProvider.credential(verificationId, data.otp);\r\n            await signInWithCredential(auth, credential);\r\n\r\n\r\n            const { phone, name, password } = formData;\r\n            const sendData = { phone, name, password };\r\n\r\n\r\n            const response = await fetch(\r\n                `${process.env.REACT_APP_API}zenstudy/api/auth/readerSignup`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(sendData)\r\n                }\r\n            );\r\n\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || \"Registration failed\");\r\n            }\r\n\r\n\r\n            const resData = await response.json();\r\n            if (resData.message === \"Success\") {\r\n                Swal.fire({\r\n                    icon: \"success\",\r\n                    title: \"Registration Successful!\",\r\n                    text: `Welcome ${name}! Your account has been created successfully. Please log in to start exploring ZenStudy.`,\r\n                });\r\n                navigate(\"/sign-In\");\r\n            }\r\n        } catch (error) {\r\n            console.error('Error verifying OTP:', error);\r\n            setOtpError(\"Invalid OTP. Please try again.\");\r\n            setotpLoading(false);\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Oops...\",\r\n                text: `Registration failed: Invalid OTP. Please try again.`,\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    // Used to resend OTP\r\n    const resendOtp = async () => {\r\n        await handlePhoneNumberAuth(`+91${formData.phone}`);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='p-2 lg:p-12 md:p-10'>\r\n            <div id=\"recaptcha-container\"></div>\r\n            <div className=\"flex flex-col items-center lg:flex-row p-4 lg:p-12 bg-white gap-10 w-full h-full\">\r\n                <animated.div ref={slideLeftRef} style={SlideLeft} className=\"bg-blue-600 text-center text-white p-4 lg:p-16 rounded-3xl lg:w-1/4 w-full\">\r\n                    <h1 className=\"text-3xl font-bold mb-4\">Welcome to ZenStudy</h1>\r\n                    {\r\n                    //     <h3 className=\"text-xl font-bold mb-4\">Connect with us</h3>\r\n                    // <div className=\"flex space-x-4 justify-center\">\r\n                    //     <Link href=\"#\" className=\"hover:bg-red-500 rounded-full p-2\"><FiYoutube size={25} className='hover:text-white' /></Link>\r\n                    //     <Link href=\"#\" className=\"hover:bg-gradient-to-br from-[#405DE6] via-[#5B51D8] to-[#E1306C] rounded-full p-2\"><FiInstagram size={25} className='hover:text-white' /></Link>\r\n                    //     <Link href=\"#\" className=\"hover:bg-[#4267B2] rounded-full p-2\"><FiFacebook size={25} className='hover:text-white' /></Link>\r\n                    //     <Link href=\"#\" className=\"hover:bg-[#1DA1F2] rounded-full p-2\"><FiTwitter size={25} className='hover:text-white' /></Link>\r\n                    // </div>\r\n                }\r\n                </animated.div>\r\n                <div className=\"flex-1 p-2 lg:p-8 lg:w-3/4 w-full text-center lg:text-center\">\r\n                    <animated.h2 ref={slideUpRef} style={SlideUp} className=\"text-3xl font-bold mb-4 text-blue-600\">Join the ZenStudy Community</animated.h2>\r\n                    <animated.p ref={slideUpRef} style={SlideUp} className=\"text-xl text-gray-600 mb-4\">Sign up now to start your learning journey with us.</animated.p>\r\n                    <animated.form ref={slideRightRef} style={SlideRight} className={`space-y-4 ${showotpForm && \"hidden\"}`} onSubmit={handleSubmit(OnSubmit)}>\r\n                        <Box sx={{ '& > :not(style)': { m: 1 } }} noValidate autoComplete=\"off\">\r\n                            <TextField\r\n                                className='w-full'\r\n                                id=\"name\"\r\n                                label=\"Enter Full Name\"\r\n                                variant=\"outlined\"\r\n                                {...register(\"name\", { required: \"Name is required\" })}\r\n                                error={!!errors.name}\r\n                                helperText={errors.name ? errors.name.message : ''}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            <MdPerson size={25} />\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                className='w-full'\r\n                                id=\"phone\"\r\n                                label=\"Enter Your phone no.\"\r\n                                variant=\"outlined\"\r\n                                {...register(\"phone\", {\r\n                                    required: \"Phone is required\",\r\n                                    minLength: { value: 10, message: \"Phone number must be 10 digits\" },\r\n                                    maxLength: { value: 10, message: \"Phone number must be 10 digits\" },\r\n                                    pattern: { value: /^\\d{10}$/, message: \"Phone number must be numeric\" }\r\n                                })}\r\n                                error={!!errors.phone}\r\n                                helperText={errors.phone ? errors.phone.message : ''}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            <MdPhone size={25} />\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                className='w-full'\r\n                                id=\"password\"\r\n                                label=\" Create password\"\r\n                                variant=\"outlined\"\r\n                                type={showPassword ? 'text' : 'password'}\r\n                                {...register(\"password\", { required: \"Password is required\" })}\r\n                                error={!!errors.password}\r\n                                helperText={errors.password ? errors.password.message : ''}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            {showPassword ?\r\n                                                <FiEye className='cursor-pointer' size={25} onClick={() => setShowPassword(false)} /> :\r\n                                                <FiEyeOff className='cursor-pointer' size={25} onClick={() => setShowPassword(true)} />\r\n                                            }\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                className='w-full'\r\n                                id=\"cpassword\"\r\n                                label=\"Confirm password\"\r\n                                variant=\"outlined\"\r\n                                type={showCPassword ? 'text' : 'password'}\r\n                                {...register(\"cpassword\", {\r\n                                    required: \"Confirm password is required\",\r\n                                    validate: value => value === password || \"Passwords do not match\"\r\n                                })}\r\n                                error={!!errors.cpassword}\r\n                                helperText={errors.cpassword ? errors.cpassword.message : ''}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            {showCPassword ?\r\n                                                <FiEye className='cursor-pointer' size={25} onClick={() => setShowCPassword(false)} /> :\r\n                                                <FiEyeOff className='cursor-pointer' size={25} onClick={() => setShowCPassword(true)} />\r\n                                            }\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </Box>\r\n                        <div className='flex justify-between'>\r\n                            <p>Already have an account ? <Link to=\"/sign-In\" className='underline text-blue-500 hover:text-blue-700'>Login</Link></p>\r\n                            {loading ? (\r\n                                <button disabled className=\"bg-red-600 text-white py-2 lg:py-2 lg:px-10 px-4 rounded-full\">Please wait...</button>\r\n                            ) : (\r\n                                <button type=\"submit\" className=\"bg-blue-600 text-white py-2 lg:py-2 lg:px-10 px-4 rounded-full\">Register</button>\r\n                            )}\r\n                        </div>\r\n                    </animated.form>\r\n\r\n\r\n                    {/* OTP Form */}\r\n                    <form className={`space-y-4 ${!showotpForm && \"hidden\"}`} onSubmit={handleSubmit2(OnSubmitOTP)}>\r\n                        <Box sx={{ '& > :not(style)': { m: 1 } }} noValidate autoComplete=\"off\">\r\n                            <TextField\r\n                                className='w-full'\r\n                                id=\"otp\"\r\n                                label=\"Enter OTP\"\r\n                                variant=\"outlined\"\r\n                                {...register2(\"otp\", { required: \"OTP is required\" })}\r\n                                error={!!errors2.otp || !!otpError}\r\n                                helperText={errors2.otp ? errors2.otp.message : otpError}\r\n                            />\r\n                        </Box>\r\n                        <div className='flex flex-col'>\r\n                            {otploading ? (\r\n                                <button disabled className=\"bg-red-600 text-white py-2 px-10 rounded-full\">Please wait...</button>\r\n                            ) : (\r\n                                <button type=\"submit\" className=\"bg-blue-600 text-white py-2 px-10 rounded-full hover:bg-blue-800\">Verify OTP</button>\r\n                            )}\r\n                            {otpSent && <p className=\"text-gray-500 text-md mt-1\">Resend OTP in <span className='text-blue-600'>{timer}</span> seconds</p>}\r\n                            {!otpSent && <button onClick={resendOtp} className=\"w-full mt-2 py-2 px-4 bg-yellow-500 text-white rounded-full hover:bg-yellow-600\">Resend OTP</button>}\r\n                        </div>\r\n                    </form>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SignUp;"],"names":["config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","getStorage","SignUp","formData","setFormData","useState","name","phone","password","cpassword","otpSent","setOtpSent","showPassword","setShowPassword","showCPassword","setShowCPassword","showotpForm","setShowOtpForm","timer","setTimer","loading","setLoading","otploading","setotpLoading","verificationId","setVerificationId","otpError","setOtpError","register","handleSubmit","formState","errors","watch","useForm","register2","handleSubmit2","errors2","navigate","useNavigate","ref","slideLeftRef","inView","slideLeftInView","useInView","triggerOnce","slideUpRef","slideUpInView","slideRightRef","slideRightInView","SlideUp","useSpring","from","y","opacity","to","duration","SlideLeft","x","SlideRight","handlePhoneNumberAuth","async","window","recaptchaVerifier","auth","RecaptchaVerifier","size","callback","appVerifier","confirmationResult","signInWithPhoneNumber","phoneNumber","startTimer","Swal","icon","title","text","concat","error","console","interval","setInterval","prevTimer","clearInterval","_jsxs","className","children","_jsx","id","animated","div","style","h2","p","form","onSubmit","data","sendData","response","fetch","process","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","Box","sx","m","noValidate","autoComplete","TextField","label","variant","required","helperText","InputProps","endAdornment","InputAdornment","position","MdPerson","minLength","value","maxLength","pattern","MdPhone","type","FiEye","onClick","FiEyeOff","validate","Link","disabled","getAuth","credential","PhoneAuthProvider","otp","signInWithCredential"],"sourceRoot":""}