{"version":3,"file":"static/js/303.0665d0be.chunk.js","mappings":"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","sources":["Firebase.jsx","components/auth/Reset-Password.jsx"],"sourcesContent":["// Initialize Firebase\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport {getStorage} from \"@firebase/storage\"\r\nconst config = {\r\n  apiKey: \"AIzaSyDIAQat6BiMvf-tFNomBJt19k9318U4QUg\",\r\n  authDomain: \"zenstudy-d4c4c.firebaseapp.com\",\r\n  projectId: \"zenstudy-d4c4c\",\r\n  storageBucket: \"zenstudy-d4c4c.appspot.com\",\r\n  messagingSenderId: \"406542645075\",\r\n  appId: \"1:406542645075:web:216c82f54462d35a3713a6\",\r\n  measurementId: \"G-C4MW5RMTWW\"\r\n\r\n}\r\nfirebase.initializeApp(config);\r\nconst analytics = getStorage(firebase.initializeApp(config))\r\nexport { firebase, analytics }\r\n\r\n\r\n    ","import React, { useState } from 'react'\r\nimport { Box, TextField, InputAdornment } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { MdPhone } from 'react-icons/md';\r\nimport { useForm } from 'react-hook-form';\r\nimport { FiEye, FiEyeOff } from 'react-icons/fi';\r\nimport { firebase } from '../../Firebase';\r\nimport {\r\n    getAuth,\r\n    signInWithCredential,\r\n    PhoneAuthProvider,\r\n} from \"firebase/auth\";\r\nimport Swal from 'sweetalert2';\r\n\r\nconst ResetPassword = () => {\r\n    const [formData, setFormData] = useState({\r\n        phone: \"\",\r\n        password: \"\",\r\n        cpassword: \"\"\r\n    })\r\n    const [otpSent, setOtpSent] = useState(false);\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [showCPassword, setShowCPassword] = useState(false)\r\n    const [showotpForm, setShowOtpForm] = useState(false)\r\n    const [timer, setTimer] = useState(40);\r\n    const [loading, setLoading] = useState(false);\r\n    const [otploading, setotpLoading] = useState(false);\r\n    const [verificationId, setVerificationId] = useState(null);\r\n    const [otpError, setOtpError] = useState(\"\")\r\n    const { register, handleSubmit, formState: { errors }, watch } = useForm()\r\n    const { register: register2, handleSubmit: handleSubmit2, formState: { errors: errors2 } } = useForm()\r\n    const navigate = useNavigate()\r\n\r\n    const password = watch(\"password\")\r\n\r\n    //Handle OTP Sent to firebase\r\n    const handlePhoneNumberAuth = async (phoneNumber) => {\r\n        try {\r\n            // Check if recaptchaVerifier is already initialized\r\n            if (!window.recaptchaVerifier) {\r\n                window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container', {\r\n                    size: 'invisible',\r\n                    callback: () => {\r\n                        //console.log('Recaptcha verified');\r\n                    },\r\n                });\r\n            }\r\n\r\n            const appVerifier = window.recaptchaVerifier;\r\n            const confirmationResult = await firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier);\r\n            setVerificationId(confirmationResult.verificationId);\r\n            setShowOtpForm(true);\r\n            startTimer();\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: 'OTP Sent',\r\n                text: `OTP has been sent to ${phoneNumber}`,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error sending OTP:', error);\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Error',\r\n                text: 'Failed to send OTP. Please try again.',\r\n            });\r\n        }\r\n    };\r\n\r\n    //called Otp Send function and User Verification code\r\n    const OnSubmit = async (data) => {\r\n        setLoading(true)\r\n        setFormData(data);\r\n        try {\r\n            const sendData = {\r\n                phone: data.phone,\r\n            }\r\n            const response = await fetch(\r\n                `${process.env.REACT_APP_API}zenstudy/api/auth/user-check`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(sendData)\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || \"Reset failed\");\r\n            }\r\n            const resData = await response.json();\r\n            ////console.log(\"ResData\", resData)\r\n            if (resData.message === \"Success\") {\r\n                await handlePhoneNumberAuth(`+91${data.phone}`);\r\n\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Password Reset Error\",\r\n                text: `An error occurred while trying to reset your password. Please try again. Error: ${error.message}`,\r\n            });\r\n            setLoading(true)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //Resend OTP Timer 40 sec\r\n    const startTimer = () => {\r\n        setOtpSent(true);\r\n        const interval = setInterval(() => {\r\n            setTimer((prevTimer) => {\r\n                if (prevTimer === 0) {\r\n                    clearInterval(interval);\r\n                    setOtpSent(false);\r\n                    setTimer(40);\r\n                    return prevTimer;\r\n                }\r\n                return prevTimer - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    //OTP Verification and user password reset API call\r\n    const OnSubmitOTP = async (data) => {\r\n        try {\r\n            // Verify OTP\r\n            setotpLoading(true)\r\n            const auth = getAuth();\r\n            const credential = PhoneAuthProvider.credential(verificationId, data.otp)\r\n            await signInWithCredential(auth, credential);\r\n\r\n            // Destructure formData\r\n            const { phone, password } = formData;\r\n\r\n            const sendData = { phone, password };\r\n\r\n            // Send user data to your backend\r\n            const response = await fetch(\r\n                `${process.env.REACT_APP_API}zenstudy/api/auth/forget`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(sendData)\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || \"Reset password failed\");\r\n            }\r\n\r\n            const resData = await response.json();\r\n            //console.log(\"ResData\", resData);\r\n\r\n            if (resData.message === \"Password updated successfully\") {\r\n                Swal.fire({\r\n                    icon: \"success\",\r\n                    title: \"Password Reset Successful!\",\r\n                    text: `Your password has been successfully reset. Please proceed to log in and start exploring ZenStudy.`,\r\n                });\r\n                navigate(\"/sign-In\");\r\n            }\r\n        } catch (error) {\r\n            console.error('Error verifying OTP:', error);\r\n            setOtpError(\"Invalid OTP. Please try again.\");\r\n            setotpLoading(false)\r\n            // Show SweetAlert error notification for registration failure\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Oops...\",\r\n                text: `Registration failed: Invalid OTP. Please try again.`,\r\n            });\r\n        }\r\n    };\r\n\r\n    //Used to resent OTP\r\n    const resendOtp = async () => {\r\n        await handlePhoneNumberAuth(`+91${formData.phone}`);\r\n    };\r\n\r\n    return (\r\n        <div className='p-0 lg:p-12 md:p-10'>\r\n            <div id=\"recaptcha-container\"></div>\r\n            <div className=\"flex flex-col items-center lg:flex-row-reverse p-4 lg:p-12 bg-white gap-10 w-full\">\r\n                <div className=\" bg-blue-600 text-center text-white p-4 lg:p-16 rounded-3xl lg:w-1/4 w-full\">\r\n                    <h1 className=\"text-4xl font-bold mb-4\">Welcome to ZenStudy</h1>\r\n                   \r\n                </div>\r\n                <div className=\"flex-1 p-4 md:p-8 lg:p-8 lg:w-3/4 w-full text-center lg:text-center\">\r\n                    <h2 className=\"text-3xl font-bold mb-4 text-blue-600\">Reset Your Password</h2>\r\n                    <p className=\"text-xl text-gray-600 mb-4\">Enter your phone below to reset your password. We'll send you a otp to create a new one.</p>\r\n                    <form className={`space-y-4 ${showotpForm && \"hidden\"}`} onSubmit={handleSubmit(OnSubmit)}>\r\n                        <Box sx={{ '& > :not(style)': { m: 1 }, }} noValidate autoComplete=\"off\">\r\n                            <TextField\r\n                                className='w-full'\r\n                                id=\"phone\"\r\n                                label=\"Enter Your phone no.\"\r\n                                variant=\"outlined\"\r\n                                {...register(\"phone\", {\r\n                                    required: \"Phone is required\",\r\n                                    minLength: { value: 10, message: \"Phone number must be 10 digits\" },\r\n                                    maxLength: { value: 10, message: \"Phone number must be 10 digits\" },\r\n                                    pattern: { value: /^\\d{10}$/, message: \"Phone number must be numeric\" }\r\n                                })}\r\n                                error={!!errors.phone}\r\n                                helperText={errors.phone ? errors.phone.message : ''}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            <MdPhone size={25} />\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                className='w-full'\r\n                                id=\"password\"\r\n                                label=\" Create password\"\r\n                                variant=\"outlined\"\r\n                                type={showPassword ? 'text' : 'password'}\r\n                                {...register(\"password\", { required: \"Password is required\" })}\r\n                                error={!!errors.password}\r\n                                helperText={errors.password ? errors.password.message : ''}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            {showPassword ?\r\n                                                <FiEye className='cursor-pointer' size={25} onClick={() => setShowPassword(false)} /> :\r\n                                                <FiEyeOff className='cursor-pointer' size={25} onClick={() => setShowPassword(true)} />\r\n                                            }\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                            <TextField\r\n                                className='w-full'\r\n                                id=\"cpassword\"\r\n                                label=\"Confirm password\"\r\n                                variant=\"outlined\"\r\n                                type={showCPassword ? 'text' : 'password'}\r\n                                {...register(\"cpassword\", {\r\n                                    required: \"Confirm password is required\",\r\n                                    validate: value => value === password || \"Passwords do not match\"\r\n                                })}\r\n                                error={!!errors.cpassword}\r\n                                helperText={errors.cpassword ? errors.cpassword.message : ''}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position='end'>\r\n                                            {showCPassword ?\r\n                                                <FiEye className='cursor-pointer' size={25} onClick={() => setShowCPassword(false)} /> :\r\n                                                <FiEyeOff className='cursor-pointer' size={25} onClick={() => setShowCPassword(true)} />\r\n                                            }\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </Box>\r\n                        <div className='flex justify-end'>\r\n                            {loading ? (\r\n                                <button disabled className=\"bg-red-600 text-white py-2 px-10 rounded-full\">Please wait...</button>\r\n                            ) : (\r\n                                <button type=\"submit\" className=\"bg-blue-600 text-white py-2 px-10 rounded-full\">Reset</button>\r\n                            )}\r\n                        </div>\r\n                    </form>\r\n\r\n                    {/* OTP Form */}\r\n                    <form className={`space-y-4 ${!showotpForm && \"hidden\"}`} onSubmit={handleSubmit2(OnSubmitOTP)}>\r\n                        <Box sx={{ '& > :not(style)': { m: 1 }, }} noValidate autoComplete=\"off\">\r\n                            <TextField\r\n                                className='w-full'\r\n                                id=\"otp\"\r\n                                label=\"Enter OTP\"\r\n                                variant=\"outlined\"\r\n                                {...register2(\"otp\", { required: \"OTP is required\" })}\r\n                                error={!!errors2.otp || !!otpError}\r\n                                helperText={errors2.otp ? errors2.otp.message : otpError}\r\n                            />\r\n                        </Box>\r\n                        <div className='flex flex-col'>\r\n                            {otploading ? (\r\n                                <button disabled className=\"bg-red-600 text-white py-2 px-10 rounded-full\">Please wait...</button>\r\n                            ) : (\r\n                                <button type=\"submit\" className=\"bg-blue-600 text-white py-2 px-10 rounded-full hover:bg-blue-800\">Verify OTP</button>\r\n                            )}\r\n                            {otpSent && <p className=\"text-gray-500 text-md mt-1\">Resend OTP in <span className='text-blue-600'>{timer}</span> seconds</p>}\r\n                            {!otpSent && <button onClick={resendOtp} className=\"w-full mt-2 py-2 px-4 bg-yellow-500 text-white rounded-full hover:bg-yellow-600\">Resend OTP</button>}\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResetPassword"],"names":["config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","getStorage","ResetPassword","formData","setFormData","useState","phone","password","cpassword","otpSent","setOtpSent","showPassword","setShowPassword","showCPassword","setShowCPassword","showotpForm","setShowOtpForm","timer","setTimer","loading","setLoading","otploading","setotpLoading","verificationId","setVerificationId","otpError","setOtpError","register","handleSubmit","formState","errors","watch","useForm","register2","handleSubmit2","errors2","navigate","useNavigate","handlePhoneNumberAuth","async","window","recaptchaVerifier","auth","RecaptchaVerifier","size","callback","appVerifier","confirmationResult","signInWithPhoneNumber","phoneNumber","startTimer","Swal","icon","title","text","concat","error","console","interval","setInterval","prevTimer","clearInterval","_jsxs","className","children","_jsx","id","onSubmit","data","sendData","response","fetch","process","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","Box","sx","m","noValidate","autoComplete","TextField","label","variant","required","minLength","value","maxLength","pattern","helperText","InputProps","endAdornment","InputAdornment","position","MdPhone","type","FiEye","onClick","FiEyeOff","validate","disabled","getAuth","credential","PhoneAuthProvider","otp","signInWithCredential"],"sourceRoot":""}